using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Tp_EventoComida;

// Persona.cs
namespace Tp_EventoComida
{
    /// Clase abstracta que proporciona implementaci√≥n base com√∫n para todas las personas.
    /// Implementa la interfaz IPersona y define comportamiento com√∫n.
    public abstract class Persona : IPersona
    {
        // üîπ PROPIEDADES COMUNES - Implementaci√≥n de la interfaz
        public int Id { get; protected set; }
        public string NombreCompleto { get; protected set; }
        public string Email { get; protected set; }
        public string Telefono { get; protected set; }

        /// Constructor protegido que valida datos comunes y establece propiedades base
        protected Persona(int id, string nombreCompleto, string email, string telefono)
        {
            // ‚úÖ VALIDACIONES COMUNES - Aplicadas a todas las personas
            ValidadorDatos.ValidarEmail(email);
            ValidadorDatos.ValidarTelefono(telefono);

            // üèóÔ∏è INICIALIZACI√ìN DE PROPIEDADES BASE
            Id = id;
            NombreCompleto = nombreCompleto;
            Email = email;
            Telefono = telefono;
        }

        // üîπ COMPORTAMIENTOS COMUNES - Implementaciones base

        /// Implementaci√≥n base del registro - com√∫n para todas las personas
        /// Las clases derivadas pueden extender este comportamiento
        public virtual void Registrar()
        {
            // üìù Comportamiento com√∫n de registro
            Console.WriteLine($"{NombreCompleto} se ha registrado en el sistema.");
        }

        /// Proporciona datos de contacto en formato unificado
        public virtual string ProporcionarDatosContacto()
        {
            return $"Contacto: {Email} | Tel: {Telefono}";
        }

        // üîπ COMPORTAMIENTO ABSTRACTO - Obliga a las clases derivadas a implementar su l√≥gica espec√≠fica
        
        /// M√©todo abstracto que cada tipo de persona debe implementar
        /// para mostrar informaci√≥n espec√≠fica de su rol
        public abstract string PresentarInformacion();

        // üîπ M√âTODOS UTILITARIOS COMUNES

        /// Permite actualizar datos de contacto con validaciones
        public virtual void ActualizarContacto(string nuevoEmail, string nuevoTelefono)
        {
            // ‚úÖ Validaciones antes de actualizar
            ValidadorDatos.ValidarEmail(nuevoEmail);
            ValidadorDatos.ValidarTelefono(nuevoTelefono);
            
            // ‚úèÔ∏è Actualizaci√≥n de propiedades
            Email = nuevoEmail;
            Telefono = nuevoTelefono;
        }

        /// Representaci√≥n string com√∫n para todas las personas
        public override string ToString()
        {
            return $"{NombreCompleto} ({Email})";
        }
    }
}